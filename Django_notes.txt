Django Notes

path: /g/My Drive/python/tms

----------------------------------------------------------------------------------------------------------------------------------------------------------------

HTTP -> Hypertext Transfer Protocol and is used to structure requests and responses over the internet

The transfer of resources happens using TCP (Transmission Control Protocol).

URL -> Uniform Resource Locator

Django comes with an admin panel, a user authentication system, a database, and something called object-relational mapper (ORM) 
that helps a web application interact with a database. These are some of the “batteries” included in Django to help build projects 
faster without having to worry about which tools to use.


The Django project describes itself as an MTV framework, using Models, Templates and Views.

* The model portion deals with data and databases, it can retrieve, store, and change data in a database.

* The template determines how the data looks on a web page.

* The view describes the data to be presented, and passes this information to the template.


----------------------------------------------------------------------------------------------------------------------------------------------------------------

STARTING A DJANGO PROJECT

* django-admin <command> [options] ->  Django provides us with django-admin, a command-line utility that helps us with a variety of administrative tasks.

* django-admin help -> Running django-admin help will provide a list of possible commands.

* django-admin startproject <projectname> -> A Django project can be easily created with the startproject command. It takes a couple of 
  options– the name of the project and optionally the directory for our project.


Django will then create a directory for the project, or the project root folder.

* Inside the project root folder is a Python file, manage.py, that contains a collection of useful functions used to administer the project. This file 
  performs the same actions as django-admin but is set specifically to the project.

* Alongside the manage.py is another directory with the same name as the project. This folder is treated as a Python package because of the presence
  of __init__.py, and inside this directory contains important settings and configuration files for the project.



----------------------------------------------------------------------------------------------------------------------------------------------------------------

CONFIGURING DJANGO SETTINGS

## Important for us are settings.py and urls.py ##

Since the project comes pre-configured, we can start a server to test that the project works. 

A development server can be started by using manage.py and providing the runserver command. 

This command must be run in the root directory, the same directory where manage.py is located. 

By default, Django will start a development server with port 8000, but an alternate port can be provided as an option.


* python3 manage.py runserver <port_number>


The Django development server will hot-reload as changes are made to the project, so we don’t have to keep restarting the server as we develop. 

* The server will keep running until we stop it with the ctrl + c.


----------------------------------------------------------------------------------------------------------------------------------------------------------------

MIGRATING THE DATABASE 

A migration is a pending database change. As we saw in settings.py, by default, Django will have some apps installed. 

Some of these default apps, for example, the admin interface, use the database and the migrations must be applied to the SQLite database.


* Whenever we make changes to the model of the database, we must apply the changes by running python3 manage.py migrate


By applying our migration, we have access to the admin app! The admin app comes pre-installed and can be navigated to since it has its URL 
provided in urls.py we saw earlier. 

At the moment there aren’t any admin users but we can still visit localhost/admin to see the admin login page.



----------------------------------------------------------------------------------------------------------------------------------------------------------------

DJANGO APPS

A Django app is a submodule to a project, that contains the code for a specific feature.

In the submodule, we’ll find things like: a models.py file, a migration directory, and other files and directories related to the application.

A Django app can be created by running the startapp command in the project root directory, the directory with manage.py, and providing the name 
of the app as an additional option.

* python3 manage.py startapp myapp

In order for Django to be aware of the app’s existence, it needs to be added to the list of INSTALLED_APPS in the project’s settings.py file.

INSTALLED_APPS = [
  "myapp.apps.MyappConfig"
]

AFTER CREATING AN APP YOU NEED TO ADD IT TO THE INSTALLED_APP LIST


----------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATING A VIEW FOR AN APP

Views are the information brokers in a Django application that decides what data gets delivered to a template and displayed.

*  A view is a class or function that processes a request and sends a response back.

The view function may:

1) Check to see if the customer is logged in

2) Request their profile information from a database

3) Format the information in a template

4) Send back the profile page as an HTML file for the customer to view in their browser


In Django, requests, and responses are handled as HttpRequest and HttpResponse objects from a module called django.http.


When a page is requested:
1) Django creates an HttpRequest object that contains information about the request

2)Django loads the appropriate view, passing the HttpRequest as the first argument to the view function


Each view function is responsible for returning an HttpResponse object. The HttpResponse response object can be the HTML 
contents of a web page, a redirect, an error, an XML document, an image, or just about anything that can display on a web page.


A simple view function would look like this:

def index(request):
	return HttpResponse("this is the response!")


THE FUNCTIONS MUST BE WRITTEN INSIDE views.py code


----------------------------------------------------------------------------------------------------------------------------------------------------------------

USING A VIEW TO SEND AN HTML PAGE 


We can use Django to render an HTML page when a view function is called. 

Django will look in each app folder inside INSTALLED_APPS for directories named templates. 

* That is to place our HTML pages inside a directory that has the same name as your app within the templates/ directory.


The resulting folder structure will look like this:

myapp/
	templates/
		myapp/
			mytemplate.html


View to send an HTML page:

###

from django.template import loader

def home():
  template = loader.get_template("app/home.html")
  return HttpResponse(template.render())

###



----------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATING A DJANGO TEMPLATE


To place content generated from Django inside the HTML file, we need to turn our static HTML file into a template.


In the context of a web framework, templates are pages created with special markup that allows for backend data and 
commands to modify the contents of a page.


Django employs a special syntax called Django Templating Language to distinguish itself from HTML, CSS, and JavaScript.


That syntax in many template languages uses curly braces, sometimes referred to as handlebars, as a placeholder for data 
that is passed by Django.


In HTML, we use curly braces like this: inside the app template

<h1>Hello, {{name}}</h1>


When we call the view to render the template, we can use something called a context to tell Django what to replace in the template


The relationships in the context are referred to as a name/value pair. By default, a context is an empty dictionary.


* context = {"name": "Junior"}


We then pass the context as an argument in the render function inside of view.py.


###

from django.http import HttpResponse
from django.template import loader

def home(request):
  context = {"name": "Junior"}
  template = loader.get_template("app/home.html")
  return HttpResponse(template.render(context))

###

This would return a webpage that says “Hello, Junior” inside an <h1> tag.


It’s quite common in Django to load templates, fill their context, and return an HttpResponse object with their rendered template. 


Django provides a shortcut for this pattern called the render() function! The render() function will do the work of loading the
template and provide the contexts when they are passed as arguments.


###

from django.shortcuts import render
 
def home(request):
  context = {"name": "Junior"}
  return render(request, "app/home.html", context)

###


The render() function takes the request object as its first argument, a template name as its second argument, and a dictionary 
as an optional third argument that passes the context variables to the template.



----------------------------------------------------------------------------------------------------------------------------------------------------------------

WIRING UP A VIEW

On the internet, every page needs its own URL because each URL displays unique information.

In Django, we can use something called a URLconf, for URL configuration.























































